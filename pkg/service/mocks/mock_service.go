// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/vnSasa/IntelliasGo_Project_REST-API_Film-Manager/model"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockAuthorization) CreateAdmin(admin app.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", admin)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAuthorizationMockRecorder) CreateAdmin(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAuthorization)(nil).CreateAdmin), admin)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user app.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockAuthorization) DeleteUser(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthorizationMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthorization)(nil).DeleteUser), id)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(login, password string) (*app.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", login, password)
	ret0, _ := ret[0].(*app.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), login, password)
}

// GetUser mocks base method.
func (m *MockAuthorization) GetUser(login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAuthorizationMockRecorder) GetUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAuthorization)(nil).GetUser), login, password)
}

// ParseRefreshToken mocks base method.
func (m *MockAuthorization) ParseRefreshToken(refreshToken string) (*app.RefreshTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRefreshToken", refreshToken)
	ret0, _ := ret[0].(*app.RefreshTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRefreshToken indicates an expected call of ParseRefreshToken.
func (mr *MockAuthorizationMockRecorder) ParseRefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRefreshToken", reflect.TypeOf((*MockAuthorization)(nil).ParseRefreshToken), refreshToken)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (*app.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(*app.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// RefreshToken mocks base method.
func (m *MockAuthorization) RefreshToken(refreshData *app.RefreshTokenClaims) (*app.TokenDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshData)
	ret0, _ := ret[0].(*app.TokenDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthorizationMockRecorder) RefreshToken(refreshData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthorization)(nil).RefreshToken), refreshData)
}

// VerifyAdminToken mocks base method.
func (m *MockAuthorization) VerifyAdminToken(accessToken string) (*app.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyAdminToken", accessToken)
	ret0, _ := ret[0].(*app.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyAdminToken indicates an expected call of VerifyAdminToken.
func (mr *MockAuthorizationMockRecorder) VerifyAdminToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyAdminToken", reflect.TypeOf((*MockAuthorization)(nil).VerifyAdminToken), accessToken)
}

// VerifyUserToken mocks base method.
func (m *MockAuthorization) VerifyUserToken(accessToken string) (*app.AccessTokenClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserToken", accessToken)
	ret0, _ := ret[0].(*app.AccessTokenClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserToken indicates an expected call of VerifyUserToken.
func (mr *MockAuthorizationMockRecorder) VerifyUserToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserToken", reflect.TypeOf((*MockAuthorization)(nil).VerifyUserToken), accessToken)
}

// MockDirectorsList is a mock of DirectorsList interface.
type MockDirectorsList struct {
	ctrl     *gomock.Controller
	recorder *MockDirectorsListMockRecorder
}

// MockDirectorsListMockRecorder is the mock recorder for MockDirectorsList.
type MockDirectorsListMockRecorder struct {
	mock *MockDirectorsList
}

// NewMockDirectorsList creates a new mock instance.
func NewMockDirectorsList(ctrl *gomock.Controller) *MockDirectorsList {
	mock := &MockDirectorsList{ctrl: ctrl}
	mock.recorder = &MockDirectorsListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectorsList) EXPECT() *MockDirectorsListMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDirectorsList) Create(director app.DirectorsList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", director)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDirectorsListMockRecorder) Create(director interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDirectorsList)(nil).Create), director)
}

// Delete mocks base method.
func (m *MockDirectorsList) Delete(directorID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", directorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDirectorsListMockRecorder) Delete(directorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDirectorsList)(nil).Delete), directorID)
}

// GetAll mocks base method.
func (m *MockDirectorsList) GetAll() ([]app.DirectorsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]app.DirectorsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDirectorsListMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDirectorsList)(nil).GetAll))
}

// GetByID mocks base method.
func (m *MockDirectorsList) GetByID(directorID int) (app.DirectorsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", directorID)
	ret0, _ := ret[0].(app.DirectorsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDirectorsListMockRecorder) GetByID(directorID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDirectorsList)(nil).GetByID), directorID)
}

// Update mocks base method.
func (m *MockDirectorsList) Update(directorID int, input app.UpdateDirectorInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", directorID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDirectorsListMockRecorder) Update(directorID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDirectorsList)(nil).Update), directorID, input)
}

// MockFilmsList is a mock of FilmsList interface.
type MockFilmsList struct {
	ctrl     *gomock.Controller
	recorder *MockFilmsListMockRecorder
}

// MockFilmsListMockRecorder is the mock recorder for MockFilmsList.
type MockFilmsListMockRecorder struct {
	mock *MockFilmsList
}

// NewMockFilmsList creates a new mock instance.
func NewMockFilmsList(ctrl *gomock.Controller) *MockFilmsList {
	mock := &MockFilmsList{ctrl: ctrl}
	mock.recorder = &MockFilmsListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmsList) EXPECT() *MockFilmsListMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFilmsList) Create(film app.FilmsList) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFilmsListMockRecorder) Create(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFilmsList)(nil).Create), film)
}

// Delete mocks base method.
func (m *MockFilmsList) Delete(filmID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", filmID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFilmsListMockRecorder) Delete(filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFilmsList)(nil).Delete), filmID)
}

// GetAll mocks base method.
func (m *MockFilmsList) GetAll() ([]app.FilmsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]app.FilmsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFilmsListMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFilmsList)(nil).GetAll))
}

// GetAllFilterFilms mocks base method.
func (m *MockFilmsList) GetAllFilterFilms(input app.FiltersFilmsInput) ([]app.FilmsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilterFilms", input)
	ret0, _ := ret[0].([]app.FilmsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilterFilms indicates an expected call of GetAllFilterFilms.
func (mr *MockFilmsListMockRecorder) GetAllFilterFilms(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilterFilms", reflect.TypeOf((*MockFilmsList)(nil).GetAllFilterFilms), input)
}

// GetByID mocks base method.
func (m *MockFilmsList) GetByID(filmID int) (app.FilmsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", filmID)
	ret0, _ := ret[0].(app.FilmsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFilmsListMockRecorder) GetByID(filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFilmsList)(nil).GetByID), filmID)
}

// Update mocks base method.
func (m *MockFilmsList) Update(filmID int, input app.UpdateFilmInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", filmID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockFilmsListMockRecorder) Update(filmID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFilmsList)(nil).Update), filmID, input)
}

// MockFavouriteFilms is a mock of FavouriteFilms interface.
type MockFavouriteFilms struct {
	ctrl     *gomock.Controller
	recorder *MockFavouriteFilmsMockRecorder
}

// MockFavouriteFilmsMockRecorder is the mock recorder for MockFavouriteFilms.
type MockFavouriteFilmsMockRecorder struct {
	mock *MockFavouriteFilms
}

// NewMockFavouriteFilms creates a new mock instance.
func NewMockFavouriteFilms(ctrl *gomock.Controller) *MockFavouriteFilms {
	mock := &MockFavouriteFilms{ctrl: ctrl}
	mock.recorder = &MockFavouriteFilmsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFavouriteFilms) EXPECT() *MockFavouriteFilmsMockRecorder {
	return m.recorder
}

// AddFavouriteFilm mocks base method.
func (m *MockFavouriteFilms) AddFavouriteFilm(userID, filmID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFavouriteFilm", userID, filmID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFavouriteFilm indicates an expected call of AddFavouriteFilm.
func (mr *MockFavouriteFilmsMockRecorder) AddFavouriteFilm(userID, filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFavouriteFilm", reflect.TypeOf((*MockFavouriteFilms)(nil).AddFavouriteFilm), userID, filmID)
}

// Delete mocks base method.
func (m *MockFavouriteFilms) Delete(userID, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFavouriteFilmsMockRecorder) Delete(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFavouriteFilms)(nil).Delete), userID, id)
}

// GetAllFavouriteFilms mocks base method.
func (m *MockFavouriteFilms) GetAllFavouriteFilms(userID int) ([]app.FilmsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFavouriteFilms", userID)
	ret0, _ := ret[0].([]app.FilmsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFavouriteFilms indicates an expected call of GetAllFavouriteFilms.
func (mr *MockFavouriteFilmsMockRecorder) GetAllFavouriteFilms(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFavouriteFilms", reflect.TypeOf((*MockFavouriteFilms)(nil).GetAllFavouriteFilms), userID)
}

// MockWishFilms is a mock of WishFilms interface.
type MockWishFilms struct {
	ctrl     *gomock.Controller
	recorder *MockWishFilmsMockRecorder
}

// MockWishFilmsMockRecorder is the mock recorder for MockWishFilms.
type MockWishFilmsMockRecorder struct {
	mock *MockWishFilms
}

// NewMockWishFilms creates a new mock instance.
func NewMockWishFilms(ctrl *gomock.Controller) *MockWishFilms {
	mock := &MockWishFilms{ctrl: ctrl}
	mock.recorder = &MockWishFilmsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWishFilms) EXPECT() *MockWishFilmsMockRecorder {
	return m.recorder
}

// AddWishFilm mocks base method.
func (m *MockWishFilms) AddWishFilm(userID, filmID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWishFilm", userID, filmID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWishFilm indicates an expected call of AddWishFilm.
func (mr *MockWishFilmsMockRecorder) AddWishFilm(userID, filmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWishFilm", reflect.TypeOf((*MockWishFilms)(nil).AddWishFilm), userID, filmID)
}

// Delete mocks base method.
func (m *MockWishFilms) Delete(userID, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockWishFilmsMockRecorder) Delete(userID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockWishFilms)(nil).Delete), userID, id)
}

// GetAllWishFilms mocks base method.
func (m *MockWishFilms) GetAllWishFilms(userID int) ([]app.FilmsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllWishFilms", userID)
	ret0, _ := ret[0].([]app.FilmsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllWishFilms indicates an expected call of GetAllWishFilms.
func (mr *MockWishFilmsMockRecorder) GetAllWishFilms(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWishFilms", reflect.TypeOf((*MockWishFilms)(nil).GetAllWishFilms), userID)
}
